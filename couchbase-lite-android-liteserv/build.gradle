/**
 * ./gradlew -Dversion=0.0.0-688 -Dfeature=basic|full -Dstorage=SQLite|ForestDB -Ddbpassword={dbname}:{password},... <task>
 */
final String DEF_VERSION = "1.3.1"
final String DEF_FEATURE = "basic"
final String DEF_STORAGEE = "SQLite" // SQLite or ForestDB
final String DEF_DBPASSWORD = ""; // null or empty -> no encryption password, with password -> enc

println "version=" + System.getProperty('version', DEF_VERSION)
println "feature=" + System.getProperty('feature', DEF_FEATURE)
println "storage=" + System.getProperty('storage', DEF_STORAGEE)
println "dbpassword=" + System.getProperty('dbpassword', DEF_DBPASSWORD)

apply plugin: 'com.android.application'

dependencies {
    compile 'com.android.support:support-v4:13.0.+'
    compile fileTree(dir: 'libs', include: '*.jar')

    compile 'com.couchbase.lite:couchbase-lite-android:' + System.getProperty('version', DEF_VERSION)
    compile 'com.couchbase.lite:couchbase-lite-java-javascript:' + System.getProperty('version', DEF_VERSION)
    compile 'com.couchbase.lite:couchbase-lite-java-listener:' + System.getProperty('version', DEF_VERSION)

    // basic -> SQLite, full -> with SQLCipher & ForestDB
    if (System.getProperty('feature', DEF_FEATURE).equalsIgnoreCase("full")) {
        compile 'com.couchbase.lite:couchbase-lite-android-forestdb:' + System.getProperty('version', DEF_VERSION)
        compile 'com.couchbase.lite:couchbase-lite-android-sqlcipher:' + System.getProperty('version', DEF_VERSION)
    }
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 22
        manifestPlaceholders = [storage: System.getProperty('storage', DEF_STORAGEE), dbpassword: System.getProperty('dbpassword', DEF_DBPASSWORD)]
    }

    lintOptions {
        abortOnError false
    }

    // workaround for "duplicate files during packaging of APK" issue
    // see https://groups.google.com/d/msg/adt-dev/bl5Rc4Szpzg/wC8cylTWuIEJ
    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }
}


task createMavenDirectory(type: Exec) {

    ext {
        uploadUser = System.getenv("MAVEN_UPLOAD_USERNAME") + ":" + System.getenv("MAVEN_UPLOAD_PASSWORD")
        mkcolPath  = System.getenv("MAVEN_UPLOAD_REPO_URL") + "com/couchbase/lite/couchbase-lite-android-liteserv/" + System.getenv("MAVEN_UPLOAD_VERSION") + "/"
    }
    commandLine "curl", "--user", uploadUser, "-X", "MKCOL", mkcolPath
}

// this hack is only needed for apache mod_dav based Maven repo's like file.couchbase.com.  otherwise, skip it
createMavenDirectory.onlyIf { System.getenv("MAVEN_UPLOAD_REPO_URL").contains("files") }

task uploadArchivesWrapper(dependsOn: createMavenDirectory) << {
    uploadArchives.execute()
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: System.getenv("MAVEN_UPLOAD_REPO_URL")) {
                authentication(userName: System.getenv("MAVEN_UPLOAD_USERNAME"), password: System.getenv("MAVEN_UPLOAD_PASSWORD"))
            }
            pom.version = System.getenv("MAVEN_UPLOAD_VERSION")  
            pom.groupId = 'com.couchbase.lite'
            pom.artifactId = 'couchbase-lite-android-liteserv'
            pom.project {
                licenses {
                    license {
                        name 'Couchbase Community Edition License Agreement'
                        url 'http://www.couchbase.com/agreement/community'
                        distribution 'repo'
                    }
                }
            }
        }
    }
}
